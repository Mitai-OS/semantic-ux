#!/usr/bin/env bash
# Script /usr/bin/magic-menu para o KDE Plasma


RPAD="             "

if [ -z "${XDG_DATA_HOME}" ]; then
    export XDG_DATA_HOME="${HOME}/.local/share"
fi

mkdir -p "${XDG_DATA_HOME}/applications"
echo '[Desktop Entry]
Name=Magic Menu
Exec=/usr/bin/magic-menu %f
Type=Application
NoDisplay=true
MimeType=application/x-magic-menu;
' > "${XDG_DATA_HOME}/applications/magic-menu.desktop"

mkdir -p "${XDG_DATA_HOME}/mime/packages"
echo '<?xml version="1.0" encoding="UTF-8"?>
<mime-info xmlns="http://www.freedesktop.org/standards/shared-mime-info">
  <mime-type type="application/x-magic-menu-creator">
    <comment>Magic Menu Script Creator</comment>
    <magic priority="100">
      <match type="string" value="#@/bin/magic-menu -c" offset="0"/>
    </magic>
    <glob-deleteall/>
  </mime-type>
</mime-info>
' > "${XDG_DATA_HOME}/mime/packages/magic-menu-creator.xml"


update-mime-database "${XDG_DATA_HOME}/mime"
update-desktop-database "${XDG_DATA_HOME}/applications"
xdg-mime default magic-menu.desktop application/x-magic-menu

PID=""

function update-desktops {
    shopt -s nullglob
    for applications_dir in "${1}"/*/; do
        name=$(basename "${applications_dir}")
        icon=$(grep "^Icon=" "${applications_dir}/.directory" | cut -d\= -f2)
        desktop=$(echo -n "${name}" | tr '[:space:]' '_')
        applications_path="${applications_dir}/Aplicativos"

        mimetypes=$(grep "MimeType=" "${applications_dir}/Aplicativos"/* | cut -d\= -f2 | tr ';' '\n' | sort -u | tr '\n' ';' | sed 's|^;||g')
        categories=$(grep "Categories=" "${applications_dir}/Aplicativos"/* | cut -d\= -f2 | tr ';' '\n' | sort -u | tr '\n' ';' | sed 's|^;||g')

        for launcher in "${applications_dir}/Aplicativos"/*; do
            template_name=$(basename -s .desktop "${launcher}")
            icon=$(grep -A9999 "\[\]" "${launcher}" | grep -m1 "Icon=" | cut -d\= -f2)
            mkdir -p "${applications_dir}/Modelos/${template_name}"
            (
                echo "[Desktop Entry]"
                echo "Name=${name}"
                echo "Icon=${icon}"
            ) > "${applications_dir}/Modelos/${template_name}/.directory"
        done
        (
            echo "[Desktop Entry]"
            echo "Name=${name}"
            echo "Icon=${icon}"
            echo "Exec=magic-menu-player ${desktop} %f"
            echo "Type=Application"
            echo "MimeType=${mimetypes}"
            echo "Categories=${categories}"
            echo "X-Magic-Menu-Data-Directory=${name}"
        ) > "${XDG_DATA_HOME}/applications/magic-menu-${desktop}.desktop"
    done
    shopt -u nullglob
}

function sanitize-applications-database {
    shopt -s nullglob
    for application in "${XDG_DATA_HOME}/applications"/magic-menu-*.desktop; do
        grep -q "X-Magic-Menu-Data-Directory" "${application}" && {
            group_directory=$(grep "X-Magic-Menu-Data-Directory" "${application}" | cut -d= -f2);
            if [ ! -d "${group_directory}" ]; then
              rm "${application}"
            fi
        }
    done
    shopt -u nullglob
}

function get-name {
    local name=$(kdialog --inputbox "Qual nome deve aparecer no menu?${RPAD}" \
                         --title "Passo 1/3 - Escolha um nome")
    if [ "${name}" = "" ]; then
        kdialog --warningcontinuecancel "Você precisa fornecer um nome para continuar${RPAD}\n" \
                --title "Passo 1/3 - Escolha um nome" --continue-label "Escolher um nome" || exit ;
        get-name;
      return 0
    fi
    echo -n "${name}"
}

function get-icon {
    local icon=$(kdialog --geticon --title "Passo 2/3 - Escolha um ícone")
    if [ "${icon}" = "" ]; then
        kdialog --warningcontinuecancel "Você precisa fornecer um ícone para continuar${RPAD}\n" \
                --title "Passo 2/3 - Escolha um ícone" --continue-label "Escolher um ícone" || exit ;
        get-icon;
      return 0
    fi
    echo -n "${icon}"
}

function create-group {
    local name=$(get-name | tr '/' ' ' | tr '\' ' ')
    local icon=$(get-icon)
    local desktop=$(echo -n "${name}" | tr '[:space:]' '_')

    chmod a+w "${HOME}/Menu de aplicativos/Agrupar/"

    mkdir -p "${HOME}/Menu de aplicativos/Agrupar/${name}"
    mkdir -p "${HOME}/Menu de aplicativos/Agrupar/${name}/Modelos"
    mkdir -p "${HOME}/Menu de aplicativos/Agrupar/${name}/Aplicativos"
    echo "[Desktop Entry]
Icon=${icon}" > "${HOME}/Menu de aplicativos/Agrupar/${name}/.directory"

    chmod a-w "${HOME}/Menu de aplicativos/Agrupar/"
    chmod a-w "${HOME}/Menu de aplicativos/Agrupar/${name}"

    kdialog --msgbox "Grupo criado com sucesso!

1) Arraste os aplicativos que deseja agrupar para do Menu de Aplicativos
para a pasta 'Menu de aplicativos', quando fizer isso uma pasta será criada
em '~/Menu de aplicativos/${name}/Modelos'

2) Nessa pasta você pode adicionar os modelos de arquivos para serem criados
com o aplicativo

3) Se você definir para abrir um arquivo com esse grupo, o aplicativo interno
correto será usa usado para abrir, se tiver mais de um que pode abrir o arquivo
você poderá escolher qual vai abrir o arquivo

"
  echo "[Desktop Entry]
Name=${name}
Exec=/usr/bin/magic-menu-player ${desktop} %f
Icon=${icon}
Type=Application
X-Magic-Menu-Data-Directory="${name}"
" > "${XDG_DATA_HOME}/applications/magic-menu-${desktop}.desktop"
}

function create-structure {
    shopt -s nullglob

    mkdir -p "${HOME}/Menu de aplicativos/Agrupar"
    mkdir -p "${HOME}/Menu de aplicativos/Ocultar"

    echo '[Desktop Entry]
Icon=start-here-kde-plasma' > "${HOME}/Menu de aplicativos/.directory"

    echo '[Desktop Entry]
Icon=object-group' > "${HOME}/Menu de aplicativos/Agrupar/.directory"

    echo -n '#@/bin/magic-menu -c' > "${HOME}/Menu de aplicativos/Agrupar/Criar novo grupo"

    echo '[Desktop Entry]
Icon=view-hidden' > "${HOME}/Menu de aplicativos/Ocultar/.directory"

    chmod a-w "${HOME}/Menu de aplicativos/"
    chmod a-w "${HOME}/Menu de aplicativos/Agrupar/"

    chmod u+wx "${HOME}/Menu de aplicativos/Ocultar"

    shopt -u nullglob
}

if [ -f "${1}" ]; then
    # Foi criado a partir do arquivo "Criar novo grupo"
    grep -m1 "#@/bin/magic-menu -c" "${1}" && {
        create-structure
        create-group 
        exit
    }
fi

create-structure

